<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARM架构及相关概念</title>
    <url>/2023/12/04/test/</url>
    <content><![CDATA[<h2 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h2><h3 id="Thumb指令集"><a href="#Thumb指令集" class="headerlink" title="Thumb指令集"></a>Thumb指令集</h3><p>其是ARM指令集的一个子集，16位的 代码宽度</p>
<h2 id="哈佛架构与冯诺依曼架构"><a href="#哈佛架构与冯诺依曼架构" class="headerlink" title="哈佛架构与冯诺依曼架构"></a>哈佛架构与冯诺依曼架构</h2><h2 id="makefile-的"><a href="#makefile-的" class="headerlink" title="makefile 的"></a>makefile 的</h2><p>假设 BUILD_DIR 是一个目录路径，而你想要匹配该目录中的所有 .d 文件，不论其嵌套层级如何。在这种情况下，你可以使用以下代码：</p>
<p>-include $(wildcard $(BUILD_DIR)&#x2F;*.d)<br>这行代码将会匹配 BUILD_DIR 目录下的所有 .d 文件，但不会递归查找其子目录。如果你想要递归地包含所有子目录中的 .d 文件，你可以使用递归通配符 **，但这需要确保你的 Make 版本支持该功能。例如：</p>
<p>-include $(wildcard $(BUILD_DIR)&#x2F;**&#x2F;*.d)<br>如果你的 Make 版本不支持递归通配符 **，那么你可能需要使用其他方法来递归地包含所有子目录中的 .d 文件，比如使用 find 命令来生成文件列表。例如：</p>
<p>-include $(shell find $(BUILD_DIR) -type f -name ‘*.d’)<br>这会使用 find 命令来查找 BUILD_DIR 及其所有子目录中的所有 .d 文件，并将它们包含进来。</p>
]]></content>
  </entry>
  <entry>
    <title>Git使用小贴士</title>
    <url>/2023/12/21/git%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    <content><![CDATA[<h2 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h2><table>
<thead>
<tr>
<th>命令名称</th>
<th>命令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>克隆工程</td>
<td>git clone xxx</td>
<td>xxx为克隆链接</td>
</tr>
<tr>
<td>暂存文件修改、删除</td>
<td>git add -u</td>
<td>暂存文件修改、删除</td>
</tr>
<tr>
<td>暂存文件修改、新建</td>
<td>git add .</td>
<td>暂存文件修改、新建</td>
</tr>
<tr>
<td>暂存文件修改、删除、新建</td>
<td>git add -A</td>
<td>暂存文件修改、删除、新建</td>
</tr>
<tr>
<td>暂存文件</td>
<td>git add xxx</td>
<td>xxx可为目录、文件，为.时暂存所有</td>
</tr>
<tr>
<td>取消所有已暂存文件</td>
<td>git reset HEAD .</td>
<td>放弃所有暂存，不会取消修改</td>
</tr>
<tr>
<td>取消指定文件的暂存</td>
<td>git reset HEAD filepathname</td>
<td>放弃指定文件的暂存</td>
</tr>
<tr>
<td>放弃未暂存的指定文件的修改</td>
<td>git checkout – filepathname</td>
<td>放弃未暂存的文件修改</td>
</tr>
<tr>
<td>放弃未暂存的文件修改</td>
<td>git checkout .</td>
<td>不会删除新建的，未被git跟踪的文件</td>
</tr>
<tr>
<td>显示将要被删除的文件</td>
<td>git clean -n</td>
<td>显示将要被删除的文件</td>
</tr>
<tr>
<td>删除工作区新增的文件、文件夹</td>
<td>git clean -df</td>
<td>删除新增的文件和新增的文件夹</td>
</tr>
<tr>
<td>删除工作区新增的文件</td>
<td>git clean -f</td>
<td>删除当前目录下所有没被track过的文件，.gitignore指定的文件和文件夹不会被删除</td>
</tr>
<tr>
<td>提交</td>
<td>git commit -m “xxxxx”</td>
<td>xxx为备注信息</td>
</tr>
<tr>
<td>查看修改的地方</td>
<td>git diff xxx</td>
<td>查看修改的地方</td>
</tr>
<tr>
<td>查看工作区、暂存区</td>
<td>git status</td>
<td>查看工作区、暂存区</td>
</tr>
<tr>
<td>拉取</td>
<td>git pull</td>
<td>在主目录下操作</td>
</tr>
<tr>
<td>合并分支</td>
<td>git merge dev</td>
<td>把dev分支合并到当前分支</td>
</tr>
<tr>
<td>合并目标分支的指定文件</td>
<td>git merge dev –no-ff filepathname</td>
<td>合并目标分支的指定文件</td>
</tr>
<tr>
<td>推送</td>
<td>git push</td>
<td>推送</td>
</tr>
<tr>
<td>强制推送</td>
<td>git push -f origin master</td>
<td>适用于本地回退版本后修改推送，master为分支名</td>
</tr>
<tr>
<td>更新远程分支列表</td>
<td>git remote update origin –prune</td>
<td>与远程保持同步</td>
</tr>
<tr>
<td>更新子模块</td>
<td>git submodule update –init</td>
<td>首次后可不带–init</td>
</tr>
<tr>
<td>切换到某一本地分支</td>
<td>git checkout dev</td>
<td>dev为分支名</td>
</tr>
<tr>
<td>查看本地分支</td>
<td>git branch</td>
<td>查看本地分支</td>
</tr>
<tr>
<td>切换到本地某个分支</td>
<td>git checkout dev</td>
<td>切换到本地某个分支</td>
</tr>
<tr>
<td>查看本地分支与远程分支的关联情况</td>
<td>git branch -vv</td>
<td>查看本地分支与远程分支的关联情况</td>
</tr>
<tr>
<td>查看远程分支</td>
<td>git branch -a</td>
<td>查看远程分支</td>
</tr>
<tr>
<td>创建本地分支并切换</td>
<td>git checkout -b V1.1</td>
<td>V1.1为分支名</td>
</tr>
<tr>
<td>创建远程分支</td>
<td>git push –set-upstream origin V1.1</td>
<td>建立本地分支与新建远程分支的关联</td>
</tr>
<tr>
<td>新建本地分支并跟踪远程分支</td>
<td>git branch dev origin&#x2F;dev</td>
<td>dev为分支名称</td>
</tr>
<tr>
<td>新建本地分支并跟踪远程分支且切换</td>
<td>git checkout -b dev origin&#x2F;dev</td>
<td>本地新建分支 dev ，跟踪远程的同名分支 dev</td>
</tr>
<tr>
<td>本地新建分支 dev ，跟踪远程的同名分支 dev</td>
<td>git checkout –track origin&#x2F;dev</td>
<td>本地新建分支 dev ，跟踪远程的同名分支 dev</td>
</tr>
<tr>
<td>获取远程地址及通信方式</td>
<td>git remote -v</td>
<td>以git开头为ssh协议</td>
</tr>
<tr>
<td>更新本地仓库的remote地址</td>
<td>git remote set-url origin xxx</td>
<td>xxx为远程地址</td>
</tr>
<tr>
<td>回退到上一个版本</td>
<td>git reset –hard HEAD^</td>
<td>删除工作区的改动代码，撤销commit、add</td>
</tr>
<tr>
<td>回退到上X个版本</td>
<td>git reset –hard HEAD~3</td>
<td>~4，删除期间的所有改动，撤销commit、add</td>
</tr>
<tr>
<td>撤销提交（commit）</td>
<td>git reset –soft HEAD^</td>
<td>不删除工作区的改动代码，不撤销add</td>
</tr>
<tr>
<td>查看代码提交记录</td>
<td>git log</td>
<td>查看代码提交记录</td>
</tr>
<tr>
<td>删除本地分支</td>
<td>git branch -d Chapater6</td>
<td>Chapater6为分支名</td>
</tr>
<tr>
<td>删除远程分支</td>
<td>git push origin –delete Chapater6</td>
<td></td>
</tr>
<tr>
<td>删除本地标签</td>
<td>git tag -d rel1</td>
<td>rel1为标签名</td>
</tr>
<tr>
<td>查看所有本地标签</td>
<td>git tag -l</td>
<td></td>
</tr>
<tr>
<td>删除远程标签</td>
<td>git push –delete origin prod1.0</td>
<td></td>
</tr>
<tr>
<td>查看远程仓库信息</td>
<td>git remote show origin</td>
<td>查看远程仓库信息</td>
</tr>
</tbody></table>
<h2 id="注意项解答"><a href="#注意项解答" class="headerlink" title="注意项解答"></a>注意项解答</h2><h3 id="执行-git-pull-会覆盖本地的修改吗？"><a href="#执行-git-pull-会覆盖本地的修改吗？" class="headerlink" title="执行 git pull 会覆盖本地的修改吗？"></a>执行 git pull 会覆盖本地的修改吗？</h3><p>没有冲突的情况下，远端会直接更新至本地上，但不会改变本地未提交的变动；如果本地修改已提交，则会执行一个远端分支和本地分支的合并</p>
<h3 id="git-fetch-和-git-pull-的区别与联系"><a href="#git-fetch-和-git-pull-的区别与联系" class="headerlink" title="git fetch 和 git pull 的区别与联系"></a>git fetch 和 git pull 的区别与联系</h3><p><code>git fetch</code>用于从远程仓库获取最新的提交，保存到本地的远程跟踪分支中（<code>FETCH_HEAD</code>），可以通过查看此分支了解远程仓库的更新情况</p>
<ul>
<li><code>git diff FETCH_HEAD</code>比较查看该分支和当前工作分支的内容</li>
</ul>
<br>

<p><code>git pull</code>会自动获取远程仓库的更新，并且合并到当前分支上，相当于<code>git fetch</code> + <code>git merge FETCH_HEAD</code></p>
<ul>
<li>将远程仓库中指定分支的最新提交 ID 保存到本地的 FETCH_HEAD 分支中</li>
<li>将 FETCH_HEAD 分支合并到当前工作分支中</li>
</ul>
<h2 id="基础非典型操作"><a href="#基础非典型操作" class="headerlink" title="基础非典型操作"></a>基础非典型操作</h2><h3 id="本地git配置"><a href="#本地git配置" class="headerlink" title="本地git配置"></a>本地git配置</h3><br>

<p><strong>配置本地与远端的SSH密钥连接流程：</strong></p>
<ul>
<li>本地生成SSH公钥和私钥(如果没有的话，另，linux下公钥通常存放于<code>~/.ssh/*.pub</code>)<ul>
<li><code>ssh-keygen -t rsa -b 4096 -C xxx@xxx.com</code></li>
</ul>
</li>
<li>复制公钥，添加至远端平台的SSH设置上<br></li>
</ul>
<p><strong>查看本地配置：</strong></p>
<ul>
<li><code>git config --list</code>查看当前项目的所有配置</li>
<li><code>git config --global --list</code>查看全局配置<br></li>
</ul>
<p><strong>修改用户名(全局&#x2F;当前项目)</strong></p>
<ul>
<li>修改全局用户名：<code>git config --global user.name &quot;xxx&quot;</code>，影响用户的所有仓库</li>
<li>修改当前路径项目的用户名：<code>git config user.name &quot;xxx&quot;</code></li>
<li>查看全局用户名：<code>git config user.name</code><br></li>
</ul>
<p><strong>初始化本地工程并与远端已有仓库的main分支关联：</strong></p>
<ul>
<li>进入工程根目录，<code>git init</code>初始化本地仓库</li>
<li>添加远程仓库：<code>git remote add origin &lt;远程仓库地址&gt;</code></li>
<li><code>git branch -M main</code>将当前分支重命名为<code>main</code>，M即<code>--move --force</code>的缩写</li>
<li>使用<code>git pull origin main</code>，将远程仓库的main分支拉取到本地，或者<code>git push -u origin main -f</code>将本地的xxx分支强制推送到远端main分支，其中-u是<code>--set-upstream</code>的缩写，后续会保持这个跟踪关系</li>
</ul>
<h3 id="标签相关操作"><a href="#标签相关操作" class="headerlink" title="标签相关操作"></a>标签相关操作</h3><p><strong>克隆远程仓库上指定标签对应的工程：</strong></p>
<ul>
<li>模板：<code>git clone -b v1.0.0 https://github.com/example/my_repo</code>–克隆仓库 <a href="https://github.com/example/my_repo">https://github.com/example/my_repo</a> 中标签 v1.0.0 对应的源码到当前目录</li>
<li>如：<code>git clone -b OpenHarmony-v4.0-Release https://gitee.com/openharmony/kernel_liteos_m.git</code></li>
</ul>
<h3 id="本地仓库同时推送远端的多个平台（推送gitee、github）"><a href="#本地仓库同时推送远端的多个平台（推送gitee、github）" class="headerlink" title="本地仓库同时推送远端的多个平台（推送gitee、github）"></a>本地仓库同时推送远端的多个平台（推送gitee、github）</h3><p><strong>方法一：为远程仓库指定多个地址</strong></p>
<ul>
<li>在本地仓库的根目录有<code>.git</code>隐藏目录，找到<code>.git/config</code>文件，打开编辑，如下所示</li>
<li>其中代码行<code>url = git@gitee.com:Jindu-Chen/jindu-chen.git</code>为新增（首先需要在远程创建&#x2F;拥有此仓库，并且本地用户已经配置好与gitee、github的连接）</li>
<li>保存退出，此时修改本地代码并提交，会同时推送到两个远端<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = git@gitee.com:Jindu-Chen/jindu-chen.git       # 新添加行</span><br><span class="line">        url = git@github.com:Jindu-Chen/Jindu-Chen.github.io.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br><span class="line">[user]</span><br><span class="line">        name = Jindu Chen</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="gitignore忽略规则"><a href="#gitignore忽略规则" class="headerlink" title=".gitignore忽略规则"></a>.gitignore忽略规则</h3><ul>
<li><p>在git项目根目录下创建.gitignore文件，然后添加需要忽略跟踪的文件选项</p>
<ul>
<li>.gitignore文件仅对当前目录及其子目录起作用</li>
</ul>
</li>
<li><p>此前已经被跟踪的文件，添加.gitignore无效</p>
<blockquote>
<p>执行<code>git rm --cached /path/to/remove</code>取消跟踪，然后提交推送</p>
</blockquote>
</li>
<li><p>强行跟踪被.gitignore忽略的某个指定文件<br><code>git add -f /path/to/add</code>或者 在.gitignore文件后添加<code>!path/to/track</code>(<code>!</code>表示覆盖前面的忽略规则)<br>如：<code>git add -f hello.bin</code> or 添加<code>!hello.bin</code></p>
</li>
</ul>
<p><strong>附上一个自用的.gitignore文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.vscode</span><br><span class="line">.history</span><br><span class="line">build</span><br><span class="line">Listings</span><br><span class="line">Objects</span><br><span class="line"></span><br><span class="line"># Listing Files</span><br><span class="line">*.i</span><br><span class="line">*.lst</span><br><span class="line">*.map</span><br><span class="line"></span><br><span class="line"># Object Files</span><br><span class="line">*.axf</span><br><span class="line">*.b[0-2][0-9]</span><br><span class="line">*.b3[0-1]</span><br><span class="line">*.bak</span><br><span class="line">*.build_log.htm</span><br><span class="line">*.crf</span><br><span class="line">*.d</span><br><span class="line">*.dep</span><br><span class="line">*.elf</span><br><span class="line">*.htm</span><br><span class="line">*.iex</span><br><span class="line">*.lnp</span><br><span class="line">*.o</span><br><span class="line">*.obj</span><br><span class="line">*.sbr</span><br><span class="line"></span><br><span class="line"># Firmware Files</span><br><span class="line">*.bin</span><br><span class="line">*.h86</span><br><span class="line">*.hex</span><br><span class="line"></span><br><span class="line"># Debugger Files</span><br><span class="line">.ini</span><br></pre></td></tr></table></figure>


<h3 id="版本发布"><a href="#版本发布" class="headerlink" title="版本发布"></a>版本发布</h3><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="钩子配置-Git-Hooks"><a href="#钩子配置-Git-Hooks" class="headerlink" title="钩子配置(Git Hooks)"></a>钩子配置(Git Hooks)</h3><ul>
<li>Hook 即在执行某个事件之前或之后进行一些其他额外的操作，如下<ul>
<li>自动部署代码</li>
<li>自动进行代码审查</li>
<li>安全审查</li>
<li>日志记录</li>
<li>通知用户</li>
</ul>
</li>
<li>Git有许多的事件（commit、push 等等），每个事件也应了有不同的钩子（如 commit 前，commit 后）</li>
<li>使用：暂略</li>
</ul>
<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><ul>
<li><p>对于需要流水线自动化作业编译的项目，可以将其工具链单独存放，作为子模块被调用</p>
</li>
<li><p>删除项目内已有的子模块配置，将其转化为本项目内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ./path/to/submodule</span><br><span class="line">rm -rf .git</span><br><span class="line"></span><br><span class="line"># at project root directory</span><br><span class="line">git rm --cached ./path/to/submodule</span><br><span class="line">git add --all</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆包含子模块的仓库后，子模块的拉取<br>  <code>git submodule update --init --recursive</code></p>
</li>
</ul>
<h3 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h3><h4 id="错误问题1"><a href="#错误问题1" class="headerlink" title="错误问题1"></a>错误问题1</h4><p>git clone时RPC failed; curl 18 transfer closed with outstanding read data remaining<br>git clone时报RPC failed; curl 18 transfer closed with outstanding read data remaining 错误</p>
<p>原因1：缓存区溢出</p>
<p>解决方法：命令行输入</p>
<p>git config http.postBuffer 524288000</p>
<p>执行上面命令如果依旧clone失败，考虑可能原因2：网络下载速度缓慢</p>
<p>解决方法：命令行输入</p>
<p>git config –global http.lowSpeedLimit 0<br>git config –global http.lowSpeedTime 999999</p>
<p>如果依旧clone失败，则首先浅层clone，然后更新远程库到本地<br>git clone –depth&#x3D;1 <a href="http://gitlab.xxx.cn/yyy/zzz.git">http://gitlab.xxx.cn/yyy/zzz.git</a><br>git fetch –unshallow</p>
<h2 id="参考站点"><a href="#参考站点" class="headerlink" title="参考站点"></a>参考站点</h2><ul>
<li><a href="https://stackoverflow.com/questions/68277661/what-does-the-m-mean-in-git-branch-m-main">What does the -M mean in git branch -M main?</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
</search>
